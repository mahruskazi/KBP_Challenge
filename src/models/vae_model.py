import torch
from torch.autograd import Variable
from torch.utils.data import DataLoader
import pytorch_lightning as pl
import src.models.networks as networks
import src.models.medicalzoo.medzoo as medzoo
from src.dataloaders.kbp_dataset import KBPDataset
from provided_code.general_functions import get_paths, sparse_vector_function
from provided_code.dose_evaluation_class import EvaluateDose
import os
import numpy as np
import pandas as pd
from collections import OrderedDict


class VAEModel(pl.LightningModule):

    def __init__(self, opt, model_name='pix2pix_default', stage='training'):
        super(VAEModel, self).__init__()
        self.opt = opt
        self.model_name = model_name
        self.stage = stage

        self.resnet_vae = medzoo.ResNet3dVAE(in_channels=1, classes=1)
        # networks.init_weights(self.resnet_vae, init_type=self.opt.init_type)
        self.gen_loss = networks.get_loss(self.opt)
        self.vae_loss = medzoo.ResNet3D_VAE.ResNetVAELoss()

    def get_inputs(self, data):
        input_A = data['ct']  # Returns tensors of size [batch_size, 1, 128, 128, 128, 1]
        input_B = data['dose']

        return Variable(input_A)[..., 0].float(), Variable(input_B)[..., 0].float()

    def forward(self, z):
        return self.resnet_vae(z)[0]

    def training_step(self, batch, batch_id, optimizer_idx=0):
        ct_image, dose = self.get_inputs(batch)

        fake, vae_output, mu, logvar = self.resnet_vae(ct_image)

        model_losses = {}
        model_losses['gen_loss'] = self.gen_loss(fake, dose) * self.opt.lambda_A
        model_losses['vae_loss'] = self.vae_loss((vae_output, ct_image), (mu, logvar))
        loss = sum(model_losses.values())

        output = OrderedDict({
            'loss': loss,
            'progress_bar': model_losses,
            'log': model_losses
        })
        return output

    def configure_optimizers(self):
        beta2 = 0.999
        optimizer = torch.optim.Adam(self.resnet_vae.parameters(), lr=self.opt.lr, betas=(self.opt.beta1, beta2))

        lr_scheduler = {
            'scheduler': networks.get_scheduler(optimizer, self.opt),
            'monitor': 'loss',
            'name': 'training_lr'
        }

        return [optimizer], [lr_scheduler]

    def prepare_data(self):
        # Define parent directory
        dataset_directory = '{}/data'.format(self.opt.primary_directory)
        training_data_dir = '{}/train-pats'.format(dataset_directory)
        validation_data_dir = '{}/validation-pats-no-dose'.format(dataset_directory)
        # path where any data generated by this code (e.g., predictions, models) are stored

        results_dir = '{}/results'.format(dataset_directory)  # parent path where results are stored

        model_results_path = '{}/{}'.format(results_dir, self.model_name)
        self.prediction_dir = '{}/{}-predictions'.format(model_results_path, self.stage)
        os.makedirs(self.prediction_dir, exist_ok=True)

        # Prepare the data directory
        plan_paths = get_paths(training_data_dir, ext='')  # gets the path of each plan's directory
        num_train_pats = np.minimum(150, len(plan_paths))  # number of plans that will be used to train model
        self.training_paths = plan_paths[:num_train_pats]  # list of training plans
        self.hold_out_paths = plan_paths[num_train_pats:]  # list of paths used for held out testing

    def train_dataloader(self):
        dataset = KBPDataset(self.opt, self.training_paths, mode_name='training_model')
        print("Number of training patients: %d" % len(dataset))
        return DataLoader(dataset, batch_size=self.opt.batchSize, shuffle=True, num_workers=0)

    def generate_csv(self, batch):
        # Get patient ID and make a prediction
        # if self.val_dataloader().batch_size != 1:
        #     raise Exception("Batch size for validation must be 1!")

        pat_id = np.squeeze(batch['patient_list'])
        pat_path = np.squeeze(batch['patient_path_list']).tolist()
        image = Variable(batch['ct'])
        image = image[..., 0].float()

        generated = self.resnet_vae(image)[0]
        # generated = 40.0*generated + 40.0  # Scale back dose to 0 - 80
        dose_pred_gy = generated.view(1, 1, 128, 128, 128, 1)
        dose_pred_gy = dose_pred_gy * batch['possible_dose_mask']
        # Prepare the dose to save
        dose_pred_gy = np.squeeze(dose_pred_gy)
        dose_pred_gy = dose_pred_gy.cpu().numpy()
        dose_to_save = sparse_vector_function(dose_pred_gy)
        dose_df = pd.DataFrame(data=dose_to_save['data'].squeeze(), index=dose_to_save['indices'].squeeze(), columns=['data'])
        file_name = '{}/{}.csv'.format(self.prediction_dir, pat_id)
        dose_df.to_csv(file_name)

        return pat_path, file_name

    def validation_step(self, batch, batch_idx):
        dose_path, pred_path = self.generate_csv(batch)

        output = {
            'dose_path': dose_path,
            'pred_path': pred_path
        }

        return output

    def validation_epoch_end(self, outputs):
        dose_files = []
        pred_files = []

        for f in outputs:
            dose_files.append(f['dose_path'])
            pred_files.append(f['pred_path'])

        data_loader_hold_out_eval = KBPDataset(self.opt, dose_files, mode_name='evaluation')
        hold_out_prediction_loader = KBPDataset(self.opt, pred_files, mode_name='predicted_dose')

        dose_evaluator = EvaluateDose(data_loader_hold_out_eval, hold_out_prediction_loader)

        if not data_loader_hold_out_eval.file_paths_list:
            print('No patient information was given to calculate metrics')
            results = {
                'dvh_score': -1,
                'dose_score': -1
            }
        else:
            dvh_score, dose_score = dose_evaluator.make_metrics()

            results = {
                'dvh_score': dvh_score,
                'dose_score': dose_score
            }
        print(results)
        self.logger.experiment.log_metrics(results)
        return results

    def val_dataloader(self):
        dataset = KBPDataset(self.opt, self.hold_out_paths, mode_name='dose_prediction')
        print("Number of validation patients: %d" % len(dataset))
        return DataLoader(dataset, batch_size=1, shuffle=False)
