from options.train_options import TrainOptions
from pix2pix_model import Pix2PixModel
import pytorch_lightning as pl
from kbp_dataset import KBPDataset
from provided_code.general_functions import get_paths, make_directory_and_return_path
import sys
import numpy as np
from torch.utils.data import DataLoader

primary_directory = '/Users/mkazi/repos/python_projects/pytorch'
sys.path.insert(0, primary_directory)

# Define parent directory
training_data_dir = '{}/train-pats'.format(primary_directory)
validation_data_dir = '{}/validation-pats-no-dose'.format(primary_directory)
# path where any data generated by this code (e.g., predictions, models) are stored
results_dir = '{}/results'.format(primary_directory)  # parent path where results are stored

# Prepare the data directory
plan_paths = get_paths(training_data_dir, ext='')  # gets the path of each plan's directory
num_train_pats = np.minimum(100, len(plan_paths))  # number of plans that will be used to train model
training_paths = plan_paths[:num_train_pats]  # list of training plans
hold_out_paths = plan_paths[num_train_pats:]  # list of paths used for held out testing

dataset = KBPDataset(training_paths)
print(len(dataset))
# dataloader = DataLoader(dataset, batch_size=4, shuffle=True)

# for i_batch, sample_batched in enumerate(dataloader):
#     print(i_batch, sample_batched.keys())

#     print(len(sample_batched['ct']))
#     break


opt = TrainOptions().parse()

model = Pix2PixModel(opt)

trainer = pl.Trainer()
trainer.fit(model)

